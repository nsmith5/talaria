// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package users

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type fbuser struct {
	_tab flatbuffers.Table
}

func GetRootAsfbuser(buf []byte, offset flatbuffers.UOffsetT) *fbuser {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &fbuser{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *fbuser) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *fbuser) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *fbuser) Username() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *fbuser) PasswordHash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *fbuser) Admin() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *fbuser) MutateAdmin(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *fbuser) Email() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *fbuser) Aliases(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *fbuser) AliasesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func fbuserStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func fbuserAddUsername(builder *flatbuffers.Builder, username flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(username), 0)
}
func fbuserAddPasswordHash(builder *flatbuffers.Builder, passwordHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(passwordHash), 0)
}
func fbuserAddAdmin(builder *flatbuffers.Builder, admin bool) {
	builder.PrependBoolSlot(2, admin, true)
}
func fbuserAddEmail(builder *flatbuffers.Builder, email flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(email), 0)
}
func fbuserAddAliases(builder *flatbuffers.Builder, aliases flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(aliases), 0)
}
func fbuserStartAliasesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func fbuserEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
